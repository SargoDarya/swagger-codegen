/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiAsserts;
import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiClientHolder;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressListenerFactory;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressRequestListenerFactory;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import io.swagger.client.model.Client;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnotherFakeApi implements ApiClientHolder {
    private ApiClient apiClient;

    public AnotherFakeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnotherFakeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for testSpecialTags
     * @param body client model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call testSpecialTagsCall(Client body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/another-fake/dummy", "PATCH",
            new ArrayList<Pair>(),new ArrayList<Pair>(), body, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/json" }, new String[]{ "application/json" },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call testSpecialTagsValidateBeforeCall(Client body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("testSpecialTags(Async)", "body", body);
        return testSpecialTagsCall(body, progressListener, progressRequestListener);
    }

    /**
     * To test special tags
     * To test special tags
     * @param body client model (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Client testSpecialTags(Client body) throws ApiException {
        return testSpecialTagsWithHttpInfo(body).getData();
    }

    /**
     * To test special tags
     * To test special tags
     * @param body client model (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Client> testSpecialTagsWithHttpInfo(Client body) throws ApiException {
        com.squareup.okhttp.Call call = testSpecialTagsValidateBeforeCall(body, null, null);
        return apiClient.execute(call, new TypeToken<Client>(){}.getType());
    }

    /**
     * To test special tags (asynchronously)
     * To test special tags
     * @param body client model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call testSpecialTagsAsync(Client body, final ApiCallback<Client> callback) throws ApiException {
        com.squareup.okhttp.Call call = testSpecialTagsValidateBeforeCall(body, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, new TypeToken<Client>(){}.getType(), callback);
        return call;
    }
}
