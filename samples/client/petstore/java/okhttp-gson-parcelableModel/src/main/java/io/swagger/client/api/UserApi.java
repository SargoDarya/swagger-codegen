/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiAsserts;
import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiClientHolder;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressListenerFactory;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressRequestListenerFactory;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import io.swagger.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi implements ApiClientHolder {
    private ApiClient apiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUser
     * @param body Created user object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCall(User body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/user", "POST",
            new ArrayList<Pair>(),new ArrayList<Pair>(), body, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserValidateBeforeCall(User body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("createUser(Async)", "body", body);
        return createUserCall(body, progressListener, progressRequestListener);
    }

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createUser(User body) throws ApiException {
        return createUserWithHttpInfo(body).getData();
    }

    /**
     * Create user
     * This can only be done by the logged in user.
     * @param body Created user object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createUserWithHttpInfo(User body) throws ApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create user (asynchronously)
     * This can only be done by the logged in user.
     * @param body Created user object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAsync(User body, final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(body, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for createUsersWithArrayInput
     * @param body List of user object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUsersWithArrayInputCall(List<User> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/user/createWithArray", "POST",
            new ArrayList<Pair>(),new ArrayList<Pair>(), body, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUsersWithArrayInputValidateBeforeCall(List<User> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("createUsersWithArrayInput(Async)", "body", body);
        return createUsersWithArrayInputCall(body, progressListener, progressRequestListener);
    }

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createUsersWithArrayInput(List<User> body) throws ApiException {
        return createUsersWithArrayInputWithHttpInfo(body).getData();
    }

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createUsersWithArrayInputWithHttpInfo(List<User> body) throws ApiException {
        com.squareup.okhttp.Call call = createUsersWithArrayInputValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates list of users with given input array (asynchronously)
     * 
     * @param body List of user object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUsersWithArrayInputAsync(List<User> body, final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = createUsersWithArrayInputValidateBeforeCall(body, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for createUsersWithListInput
     * @param body List of user object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUsersWithListInputCall(List<User> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/user/createWithList", "POST",
            new ArrayList<Pair>(),new ArrayList<Pair>(), body, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUsersWithListInputValidateBeforeCall(List<User> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("createUsersWithListInput(Async)", "body", body);
        return createUsersWithListInputCall(body, progressListener, progressRequestListener);
    }

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createUsersWithListInput(List<User> body) throws ApiException {
        return createUsersWithListInputWithHttpInfo(body).getData();
    }

    /**
     * Creates list of users with given input array
     * 
     * @param body List of user object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createUsersWithListInputWithHttpInfo(List<User> body) throws ApiException {
        com.squareup.okhttp.Call call = createUsersWithListInputValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates list of users with given input array (asynchronously)
     * 
     * @param body List of user object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUsersWithListInputAsync(List<User> body, final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = createUsersWithListInputValidateBeforeCall(body, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for deleteUser
     * @param username The name that needs to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/user/{username}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString())), "DELETE",
            new ArrayList<Pair>(),new ArrayList<Pair>(), null, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserValidateBeforeCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("deleteUser(Async)", "username", username);
        return deleteUserCall(username, progressListener, progressRequestListener);
    }

    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUser(String username) throws ApiException {
        return deleteUserWithHttpInfo(username).getData();
    }

    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String username) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(username, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete user (asynchronously)
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserAsync(String username, final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserValidateBeforeCall(username, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for getUserByName
     * @param username The name that needs to be fetched. Use user1 for testing.  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserByNameCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/user/{username}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString())), "GET",
            new ArrayList<Pair>(),new ArrayList<Pair>(), null, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserByNameValidateBeforeCall(String username, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("getUserByName(Async)", "username", username);
        return getUserByNameCall(username, progressListener, progressRequestListener);
    }

    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing.  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User getUserByName(String username) throws ApiException {
        return getUserByNameWithHttpInfo(username).getData();
    }

    /**
     * Get user by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing.  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> getUserByNameWithHttpInfo(String username) throws ApiException {
        com.squareup.okhttp.Call call = getUserByNameValidateBeforeCall(username, null, null);
        return apiClient.execute(call, new TypeToken<User>(){}.getType());
    }

    /**
     * Get user by user name (asynchronously)
     * 
     * @param username The name that needs to be fetched. Use user1 for testing.  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserByNameAsync(String username, final ApiCallback<User> callback) throws ApiException {
        com.squareup.okhttp.Call call = getUserByNameValidateBeforeCall(username, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, new TypeToken<User>(){}.getType(), callback);
        return call;
    }

    /**
     * Build call for loginUser
     * @param username The user name for login (required)
     * @param password The password for login in clear text (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loginUserCall(String username, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        List<Pair> queryParams = new ArrayList<Pair>();
        if (username != null) {
            queryParams.addAll(apiClient.parameterToPair("username", username));
        }
        List<Pair> queryParams = new ArrayList<Pair>();
        if (password != null) {
            queryParams.addAll(apiClient.parameterToPair("password", password));
        }
        return apiClient.buildCall(
            "/user/login", "GET",
            queryParamsqueryParams,new ArrayList<Pair>()new ArrayList<Pair>(), null, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loginUserValidateBeforeCall(String username, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("loginUser(Async)", "username", username);
        
        ApiAsserts.notNull("loginUser(Async)", "password", password);
        return loginUserCall(username, password, progressListener, progressRequestListener);
    }

    /**
     * Logs user into the system
     * 
     * @param username The user name for login (required)
     * @param password The password for login in clear text (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String loginUser(String username, String password) throws ApiException {
        return loginUserWithHttpInfo(username, password).getData();
    }

    /**
     * Logs user into the system
     * 
     * @param username The user name for login (required)
     * @param password The password for login in clear text (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> loginUserWithHttpInfo(String username, String password) throws ApiException {
        com.squareup.okhttp.Call call = loginUserValidateBeforeCall(username, password, null, null);
        return apiClient.execute(call, new TypeToken<String>(){}.getType());
    }

    /**
     * Logs user into the system (asynchronously)
     * 
     * @param username The user name for login (required)
     * @param password The password for login in clear text (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loginUserAsync(String username, String password, final ApiCallback<String> callback) throws ApiException {
        com.squareup.okhttp.Call call = loginUserValidateBeforeCall(username, password, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, new TypeToken<String>(){}.getType(), callback);
        return call;
    }

    /**
     * Build call for logoutUser
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call logoutUserCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/user/logout", "GET",
            new ArrayList<Pair>(),new ArrayList<Pair>(), null, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call logoutUserValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return logoutUserCall(progressListener, progressRequestListener);
    }

    /**
     * Logs out current logged in user session
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void logoutUser() throws ApiException {
        return logoutUserWithHttpInfo().getData();
    }

    /**
     * Logs out current logged in user session
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> logoutUserWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = logoutUserValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Logs out current logged in user session (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call logoutUserAsync(final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = logoutUserValidateBeforeCall(ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for updateUser
     * @param username name that need to be deleted (required)
     * @param body Updated user object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserCall(String username, User body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/user/{username}"
            .replaceAll("\\{" + "username" + "\\}", apiClient.escapeString(username.toString())), "PUT",
            new ArrayList<Pair>(),new ArrayList<Pair>(), body, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserValidateBeforeCall(String username, User body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("updateUser(Async)", "username", username);
        
        ApiAsserts.notNull("updateUser(Async)", "body", body);
        return updateUserCall(username, body, progressListener, progressRequestListener);
    }

    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted (required)
     * @param body Updated user object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUser(String username, User body) throws ApiException {
        return updateUserWithHttpInfo(username, body).getData();
    }

    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted (required)
     * @param body Updated user object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUserWithHttpInfo(String username, User body) throws ApiException {
        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(username, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updated user (asynchronously)
     * This can only be done by the logged in user.
     * @param username name that need to be deleted (required)
     * @param body Updated user object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(String username, User body, final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(username, body, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }
}
