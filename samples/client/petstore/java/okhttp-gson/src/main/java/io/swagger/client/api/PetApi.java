/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiAsserts;
import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiClientHolder;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressListenerFactory;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressRequestListenerFactory;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import java.io.File;
import io.swagger.client.model.ModelApiResponse;
import io.swagger.client.model.Pet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PetApi implements ApiClientHolder {
    private ApiClient apiClient;

    public PetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PetApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addPet
     * @param body Pet object that needs to be added to the store (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPetCall(Pet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/pet", "POST",
            new ArrayList<Pair>(),new ArrayList<Pair>(), body, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] { "petstore_auth" }, new String[]{ "application/xml", "application/json" }, new String[]{ "application/json", "application/xml" },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPetValidateBeforeCall(Pet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("addPet(Async)", "body", body);
        return addPetCall(body, progressListener, progressRequestListener);
    }

    /**
     * Add a new pet to the store
     * 
     * @param body Pet object that needs to be added to the store (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addPet(Pet body) throws ApiException {
        return addPetWithHttpInfo(body).getData();
    }

    /**
     * Add a new pet to the store
     * 
     * @param body Pet object that needs to be added to the store (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addPetWithHttpInfo(Pet body) throws ApiException {
        com.squareup.okhttp.Call call = addPetValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a new pet to the store (asynchronously)
     * 
     * @param body Pet object that needs to be added to the store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPetAsync(Pet body, final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = addPetValidateBeforeCall(body, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for deletePet
     * @param petId Pet id to delete (required)
     * @param apiKey  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePetCall(Long petId, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        Map<String, String> headerParams = new HashMap<String, String>();
        if (apiKey != null) {
            headerParams.put("api_key", apiClient.parameterToString(apiKey));
        }
        return apiClient.buildCall(
            "/pet/{petId}"
            .replaceAll("\\{" + "petId" + "\\}", apiClient.escapeString(petId.toString())), "DELETE",
            new ArrayList<Pair>(),new ArrayList<Pair>(), null, headerParams, new HashMap<String, Object>(),
            new String[] { "petstore_auth" }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePetValidateBeforeCall(Long petId, String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("deletePet(Async)", "petId", petId);
        
        
        return deletePetCall(petId, apiKey, progressListener, progressRequestListener);
    }

    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete (required)
     * @param apiKey  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePet(Long petId, String apiKey) throws ApiException {
        return deletePetWithHttpInfo(petId, apiKey).getData();
    }

    /**
     * Deletes a pet
     * 
     * @param petId Pet id to delete (required)
     * @param apiKey  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePetWithHttpInfo(Long petId, String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = deletePetValidateBeforeCall(petId, apiKey, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a pet (asynchronously)
     * 
     * @param petId Pet id to delete (required)
     * @param apiKey  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePetAsync(Long petId, String apiKey, final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = deletePetValidateBeforeCall(petId, apiKey, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for findPetsByStatus
     * @param status Status values that need to be considered for filter (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findPetsByStatusCall(List<String> status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
            List<Pair> collectionQueryParams = new ArrayList<Pair>();
        if (status != null) {
            collectionQueryParams.addAll(apiClient.parameterToPairs("csv", "status", status));
        }
        return apiClient.buildCall(
            "/pet/findByStatus", "GET",
            new ArrayList<Pair>(),collectionQueryParams, null, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] { "petstore_auth" }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findPetsByStatusValidateBeforeCall(List<String> status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("findPetsByStatus(Async)", "status", status);
        return findPetsByStatusCall(status, progressListener, progressRequestListener);
    }

    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter (required)
     * @return List&lt;Pet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Pet> findPetsByStatus(List<String> status) throws ApiException {
        return findPetsByStatusWithHttpInfo(status).getData();
    }

    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter (required)
     * @return ApiResponse&lt;List&lt;Pet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Pet>> findPetsByStatusWithHttpInfo(List<String> status) throws ApiException {
        com.squareup.okhttp.Call call = findPetsByStatusValidateBeforeCall(status, null, null);
        return apiClient.execute(call, new TypeToken<List<Pet>>(){}.getType());
    }

    /**
     * Finds Pets by status (asynchronously)
     * Multiple status values can be provided with comma separated strings
     * @param status Status values that need to be considered for filter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findPetsByStatusAsync(List<String> status, final ApiCallback<List<Pet>> callback) throws ApiException {
        com.squareup.okhttp.Call call = findPetsByStatusValidateBeforeCall(status, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, new TypeToken<List<Pet>>(){}.getType(), callback);
        return call;
    }

    /**
     * Build call for findPetsByTags
     * @param tags Tags to filter by (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findPetsByTagsCall(List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
            List<Pair> collectionQueryParams = new ArrayList<Pair>();
        if (tags != null) {
            collectionQueryParams.addAll(apiClient.parameterToPairs("csv", "tags", tags));
        }
        return apiClient.buildCall(
            "/pet/findByTags", "GET",
            new ArrayList<Pair>(),collectionQueryParams, null, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] { "petstore_auth" }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findPetsByTagsValidateBeforeCall(List<String> tags, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("findPetsByTags(Async)", "tags", tags);
        return findPetsByTagsCall(tags, progressListener, progressRequestListener);
    }

    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by (required)
     * @return List&lt;Pet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Pet> findPetsByTags(List<String> tags) throws ApiException {
        return findPetsByTagsWithHttpInfo(tags).getData();
    }

    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by (required)
     * @return ApiResponse&lt;List&lt;Pet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Pet>> findPetsByTagsWithHttpInfo(List<String> tags) throws ApiException {
        com.squareup.okhttp.Call call = findPetsByTagsValidateBeforeCall(tags, null, null);
        return apiClient.execute(call, new TypeToken<List<Pet>>(){}.getType());
    }

    /**
     * Finds Pets by tags (asynchronously)
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param tags Tags to filter by (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findPetsByTagsAsync(List<String> tags, final ApiCallback<List<Pet>> callback) throws ApiException {
        com.squareup.okhttp.Call call = findPetsByTagsValidateBeforeCall(tags, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, new TypeToken<List<Pet>>(){}.getType(), callback);
        return call;
    }

    /**
     * Build call for getPetById
     * @param petId ID of pet to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPetByIdCall(Long petId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/pet/{petId}"
            .replaceAll("\\{" + "petId" + "\\}", apiClient.escapeString(petId.toString())), "GET",
            new ArrayList<Pair>(),new ArrayList<Pair>(), null, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] { "api_key" }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPetByIdValidateBeforeCall(Long petId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("getPetById(Async)", "petId", petId);
        return getPetByIdCall(petId, progressListener, progressRequestListener);
    }

    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return (required)
     * @return Pet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Pet getPetById(Long petId) throws ApiException {
        return getPetByIdWithHttpInfo(petId).getData();
    }

    /**
     * Find pet by ID
     * Returns a single pet
     * @param petId ID of pet to return (required)
     * @return ApiResponse&lt;Pet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Pet> getPetByIdWithHttpInfo(Long petId) throws ApiException {
        com.squareup.okhttp.Call call = getPetByIdValidateBeforeCall(petId, null, null);
        return apiClient.execute(call, new TypeToken<Pet>(){}.getType());
    }

    /**
     * Find pet by ID (asynchronously)
     * Returns a single pet
     * @param petId ID of pet to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPetByIdAsync(Long petId, final ApiCallback<Pet> callback) throws ApiException {
        com.squareup.okhttp.Call call = getPetByIdValidateBeforeCall(petId, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, new TypeToken<Pet>(){}.getType(), callback);
        return call;
    }

    /**
     * Build call for updatePet
     * @param body Pet object that needs to be added to the store (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePetCall(Pet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/pet", "PUT",
            new ArrayList<Pair>(),new ArrayList<Pair>(), body, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] { "petstore_auth" }, new String[]{ "application/xml", "application/json" }, new String[]{ "application/json", "application/xml" },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePetValidateBeforeCall(Pet body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("updatePet(Async)", "body", body);
        return updatePetCall(body, progressListener, progressRequestListener);
    }

    /**
     * Update an existing pet
     * 
     * @param body Pet object that needs to be added to the store (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePet(Pet body) throws ApiException {
        return updatePetWithHttpInfo(body).getData();
    }

    /**
     * Update an existing pet
     * 
     * @param body Pet object that needs to be added to the store (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePetWithHttpInfo(Pet body) throws ApiException {
        com.squareup.okhttp.Call call = updatePetValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an existing pet (asynchronously)
     * 
     * @param body Pet object that needs to be added to the store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePetAsync(Pet body, final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = updatePetValidateBeforeCall(body, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for updatePetWithForm
     * @param petId ID of pet that needs to be updated (required)
     * @param name Updated name of the pet (optional)
     * @param status Updated status of the pet (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePetWithFormCall(Long petId, String name, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        Map<String, Object> formParams = new HashMap<String, Object>();
        if (name != null) {
            formParams.put("name", name);
        }
        
        Map<String, Object> formParams = new HashMap<String, Object>();
        if (status != null) {
            formParams.put("status", status);
        }
        return apiClient.buildCall(
            "/pet/{petId}"
            .replaceAll("\\{" + "petId" + "\\}", apiClient.escapeString(petId.toString())), "POST",
            new ArrayList<Pair>(),new ArrayList<Pair>(), null, new HashMap<String, String>(), formParamsformParams,
            new String[] { "petstore_auth" }, new String[]{ "application/xml", "application/json" }, new String[]{ "application/x-www-form-urlencoded" },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePetWithFormValidateBeforeCall(Long petId, String name, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("updatePetWithForm(Async)", "petId", petId);
        
        
        
        return updatePetWithFormCall(petId, name, status, progressListener, progressRequestListener);
    }

    /**
     * Updates a pet in the store with form data
     * 
     * @param petId ID of pet that needs to be updated (required)
     * @param name Updated name of the pet (optional)
     * @param status Updated status of the pet (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePetWithForm(Long petId, String name, String status) throws ApiException {
        return updatePetWithFormWithHttpInfo(petId, name, status).getData();
    }

    /**
     * Updates a pet in the store with form data
     * 
     * @param petId ID of pet that needs to be updated (required)
     * @param name Updated name of the pet (optional)
     * @param status Updated status of the pet (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePetWithFormWithHttpInfo(Long petId, String name, String status) throws ApiException {
        com.squareup.okhttp.Call call = updatePetWithFormValidateBeforeCall(petId, name, status, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a pet in the store with form data (asynchronously)
     * 
     * @param petId ID of pet that needs to be updated (required)
     * @param name Updated name of the pet (optional)
     * @param status Updated status of the pet (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePetWithFormAsync(Long petId, String name, String status, final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = updatePetWithFormValidateBeforeCall(petId, name, status, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for uploadFile
     * @param petId ID of pet to update (required)
     * @param additionalMetadata Additional data to pass to server (optional)
     * @param file file to upload (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFileCall(Long petId, String additionalMetadata, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        Map<String, Object> formParams = new HashMap<String, Object>();
        if (additionalMetadata != null) {
            formParams.put("additionalMetadata", additionalMetadata);
        }
        
        Map<String, Object> formParams = new HashMap<String, Object>();
        if (file != null) {
            formParams.put("file", file);
        }
        return apiClient.buildCall(
            "/pet/{petId}/uploadImage"
            .replaceAll("\\{" + "petId" + "\\}", apiClient.escapeString(petId.toString())), "POST",
            new ArrayList<Pair>(),new ArrayList<Pair>(), null, new HashMap<String, String>(), formParamsformParams,
            new String[] { "petstore_auth" }, new String[]{ "application/json" }, new String[]{ "multipart/form-data" },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadFileValidateBeforeCall(Long petId, String additionalMetadata, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("uploadFile(Async)", "petId", petId);
        
        
        
        return uploadFileCall(petId, additionalMetadata, file, progressListener, progressRequestListener);
    }

    /**
     * uploads an image
     * 
     * @param petId ID of pet to update (required)
     * @param additionalMetadata Additional data to pass to server (optional)
     * @param file file to upload (optional)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelApiResponse uploadFile(Long petId, String additionalMetadata, File file) throws ApiException {
        return uploadFileWithHttpInfo(petId, additionalMetadata, file).getData();
    }

    /**
     * uploads an image
     * 
     * @param petId ID of pet to update (required)
     * @param additionalMetadata Additional data to pass to server (optional)
     * @param file file to upload (optional)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelApiResponse> uploadFileWithHttpInfo(Long petId, String additionalMetadata, File file) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(petId, additionalMetadata, file, null, null);
        return apiClient.execute(call, new TypeToken<ModelApiResponse>(){}.getType());
    }

    /**
     * uploads an image (asynchronously)
     * 
     * @param petId ID of pet to update (required)
     * @param additionalMetadata Additional data to pass to server (optional)
     * @param file file to upload (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFileAsync(Long petId, String additionalMetadata, File file, final ApiCallback<ModelApiResponse> callback) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileValidateBeforeCall(petId, additionalMetadata, file, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, new TypeToken<ModelApiResponse>(){}.getType(), callback);
        return call;
    }
}
