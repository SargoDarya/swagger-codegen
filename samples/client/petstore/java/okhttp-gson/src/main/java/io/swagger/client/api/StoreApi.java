/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiAsserts;
import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiClientHolder;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressListenerFactory;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressRequestListenerFactory;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;


import io.swagger.client.model.Order;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoreApi implements ApiClientHolder {
    private ApiClient apiClient;

    public StoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StoreApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteOrder
     * @param orderId ID of the order that needs to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/store/order/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString())), "DELETE",
            new ArrayList<Pair>(),new ArrayList<Pair>(), null, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderValidateBeforeCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("deleteOrder(Async)", "orderId", orderId);
        return deleteOrderCall(orderId, progressListener, progressRequestListener);
    }

    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     * @param orderId ID of the order that needs to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteOrder(String orderId) throws ApiException {
        return deleteOrderWithHttpInfo(orderId).getData();
    }

    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     * @param orderId ID of the order that needs to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteOrderWithHttpInfo(String orderId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderValidateBeforeCall(orderId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete purchase order by ID (asynchronously)
     * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
     * @param orderId ID of the order that needs to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderAsync(String orderId, final ApiCallback<Void> callback) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderValidateBeforeCall(orderId, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for getInventory
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInventoryCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/store/inventory", "GET",
            new ArrayList<Pair>(),new ArrayList<Pair>(), null, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] { "api_key" }, new String[]{ "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getInventoryCall(progressListener, progressRequestListener);
    }

    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     * @return Map&lt;String, Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Integer> getInventory() throws ApiException {
        return getInventoryWithHttpInfo().getData();
    }

    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     * @return ApiResponse&lt;Map&lt;String, Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Integer>> getInventoryWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getInventoryValidateBeforeCall(null, null);
        return apiClient.execute(call, new TypeToken<Map<String, Integer>>(){}.getType());
    }

    /**
     * Returns pet inventories by status (asynchronously)
     * Returns a map of status codes to quantities
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryAsync(final ApiCallback<Map<String, Integer>> callback) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryValidateBeforeCall(ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, new TypeToken<Map<String, Integer>>(){}.getType(), callback);
        return call;
    }

    /**
     * Build call for getOrderById
     * @param orderId ID of pet that needs to be fetched (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderByIdCall(Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/store/order/{order_id}"
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString())), "GET",
            new ArrayList<Pair>(),new ArrayList<Pair>(), null, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderByIdValidateBeforeCall(Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("getOrderById(Async)", "orderId", orderId);
        return getOrderByIdCall(orderId, progressListener, progressRequestListener);
    }

    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     * @param orderId ID of pet that needs to be fetched (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order getOrderById(Long orderId) throws ApiException {
        return getOrderByIdWithHttpInfo(orderId).getData();
    }

    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     * @param orderId ID of pet that needs to be fetched (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> getOrderByIdWithHttpInfo(Long orderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderByIdValidateBeforeCall(orderId, null, null);
        return apiClient.execute(call, new TypeToken<Order>(){}.getType());
    }

    /**
     * Find purchase order by ID (asynchronously)
     * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
     * @param orderId ID of pet that needs to be fetched (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderByIdAsync(Long orderId, final ApiCallback<Order> callback) throws ApiException {
        com.squareup.okhttp.Call call = getOrderByIdValidateBeforeCall(orderId, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, new TypeToken<Order>(){}.getType(), callback);
        return call;
    }

    /**
     * Build call for placeOrder
     * @param body order placed for purchasing the pet (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call placeOrderCall(Order body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return apiClient.buildCall(
            "/store/order", "POST",
            new ArrayList<Pair>(),new ArrayList<Pair>(), body, new HashMap<String, String>(), new HashMap<String, Object>(),
            new String[] {  }, new String[]{ "application/xml", "application/json" }, new String[]{  },
            progressListener, progressRequestListener
        );
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call placeOrderValidateBeforeCall(Order body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        ApiAsserts.notNull("placeOrder(Async)", "body", body);
        return placeOrderCall(body, progressListener, progressRequestListener);
    }

    /**
     * Place an order for a pet
     * 
     * @param body order placed for purchasing the pet (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order placeOrder(Order body) throws ApiException {
        return placeOrderWithHttpInfo(body).getData();
    }

    /**
     * Place an order for a pet
     * 
     * @param body order placed for purchasing the pet (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> placeOrderWithHttpInfo(Order body) throws ApiException {
        com.squareup.okhttp.Call call = placeOrderValidateBeforeCall(body, null, null);
        return apiClient.execute(call, new TypeToken<Order>(){}.getType());
    }

    /**
     * Place an order for a pet (asynchronously)
     * 
     * @param body order placed for purchasing the pet (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call placeOrderAsync(Order body, final ApiCallback<Order> callback) throws ApiException {
        com.squareup.okhttp.Call call = placeOrderValidateBeforeCall(body, ProgressListenerFactory.newInstance(callback), ProgressRequestListenerFactory.newInstance(callback));
        apiClient.executeAsync(call, new TypeToken<Order>(){}.getType(), callback);
        return call;
    }
}
